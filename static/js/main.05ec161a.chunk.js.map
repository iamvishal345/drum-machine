{"version":3,"sources":["asset/audio/clap.wav","asset/audio/kick_zapper.wav","asset/audio/kick.wav","asset/audio/openhat_acoustic.wav","asset/audio/ride_acoustic.wav","asset/audio/snare_analog.wav","asset/audio/snare_modular.wav","asset/audio/snare.wav","asset/audio/tom_fm.wav","components/drum-pad.jsx","components/drum-controls.jsx","static/drumpadObject.js","components/drum-machine.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","audioObj","clap","kick_zapper","kick","openhat_acoustic","ride_acoustic","snare_analog","snare_modular","snare","tom_fm","DrumPad","name","value","handleClick","drumStatus","volume","clip_ref","useRef","useState","pressed","setPressed","playAudio","useCallback","current","currentTime","play","then","replace","toUpperCase","setTimeout","handleKeyUp","e","key","useEffect","document","addEventListener","removeEventListener","className","id","onClick","src","ref","type","DrumControls","display","handleDrumStatus","handleVolumeChange","min","max","disabled","onChange","drumPadObj","Q","W","E","A","S","D","Z","X","C","DrumMachine","setNode","setState","prevState","target","state","Object","keys","map","this","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"wGAAAA,EAAOC,QAAU,IAA0B,kC,gBCA3CD,EAAOC,QAAU,IAA0B,yC,gBCA3CD,EAAOC,QAAU,IAA0B,kC,gBCA3CD,EAAOC,QAAU,IAA0B,8C,gBCA3CD,EAAOC,QAAU,IAA0B,2C,gBCA3CD,EAAOC,QAAU,IAA0B,0C,gBCA3CD,EAAOC,QAAU,IAA0B,2C,gBCA3CD,EAAOC,QAAU,IAA0B,mC,gBCA3CD,EAAOC,QAAU,IAA0B,oC,4VCWrCC,EAAW,CACfC,KAAMA,IACNC,YAAaA,IACbC,KAAMA,IACNC,iBAAkBA,IAClBC,cAAeA,IACfC,aAAcA,IACdC,cAAeA,IACfC,MAAOA,IACPC,OAAQA,KA0DKC,EAvDC,SAAC,GAAsD,IAApDC,EAAmD,EAAnDA,KAAMC,EAA6C,EAA7CA,MAAOC,EAAsC,EAAtCA,YAAaC,EAAyB,EAAzBA,WAAYC,EAAa,EAAbA,OACnDC,EAAWC,iBAAO,MAD8C,EAEtCC,oBAAS,GAF6B,mBAE7DC,EAF6D,KAEpDC,EAFoD,KAG9DC,EAAYC,uBAAY,WACxBR,IACFE,EAASO,QAAQR,OAASA,EAAS,IACnCC,EAASO,QAAQC,YAAc,EAC/BR,EAASO,QAAQE,OAAOC,MAAK,WAC3BN,GAAW,MAEbP,EAAYD,EAAMe,QAAQ,KAAM,KAAKC,eACrCC,YAAW,WACTT,GAAW,KACV,QAEJ,CAACN,EAAYD,EAAaD,EAAOG,IAM9Be,EAAcR,uBAClB,SAACS,GACKjB,GAAcH,IAASoB,EAAEC,IAAIJ,eAC/BP,MAGJ,CAACP,EAAYH,EAAMU,IAQrB,OANAY,qBAAU,WAER,OADAC,SAASC,iBAAiB,QAASL,GAC5B,WACLI,SAASE,oBAAoB,QAASN,MAEvC,CAACA,IAEF,yBACEO,UAAS,mBAAevB,EAA4B,GAAf,aAA5B,YACPK,EAAU,UAAY,IAExBmB,GAAI1B,EACJ2B,QAzBqB,WACnBzB,GACFO,MAyBA,4BAAQgB,UAAU,YAAY1B,GAC9B,2BACE0B,UAAU,OACVC,GAAI3B,EACJ6B,IAAKxC,EAASY,GACd6B,IAAKzB,EACL0B,KAAK,gBCtCEC,EAhCM,SAAC,GAMf,IALLC,EAKI,EALJA,QACA9B,EAII,EAJJA,WACA+B,EAGI,EAHJA,iBACA9B,EAEI,EAFJA,OACA+B,EACI,EADJA,mBAEA,OACE,yBAAKT,UAAU,qBACb,yBACEA,UAAS,kBAAavB,EAAa,KAAO,IAC1CyB,QAASM,GAER/B,EAAa,KAAO,OAEvB,uBAAGwB,GAAG,WAAWM,GACjB,yBAAKP,UAAU,iBACb,2BACEK,KAAK,QACL/B,KAAK,gBACL2B,GAAG,gBACHS,IAAI,IACJC,IAAI,MACJC,UAAWnC,EACXF,MAAOG,EACPmC,SAAUJ,OC3BPK,EAAa,CACxBC,EAAG,OACHC,EAAG,cACHC,EAAG,OACHC,EAAG,mBACHC,EAAG,gBACHC,EAAG,eACHC,EAAG,gBACHC,EAAG,QACHC,EAAG,UC6CUC,E,kDAjDb,aAAe,IAAD,8BACZ,gBAOFC,QAAU,SAAClD,GACT,EAAKmD,SAAS,CAAEnB,QAAShC,KATb,EAWdiC,iBAAmB,kBACjB,EAAKkB,UAAS,SAACC,GACb,MAAO,CAAElD,YAAakD,EAAUlD,WAAY8B,QAAS,QAb3C,EAedE,mBAAqB,SAACf,GACpB,EAAKgC,SAAS,CACZhD,OAAQgB,EAAEkC,OAAOrD,MACjBgC,QAAQ,WAAD,OAAab,EAAEkC,OAAOrD,UAhB/B,EAAKsD,MAAQ,CACXtB,QAAS,MACT9B,YAAY,EACZC,OAAQ,IALE,E,qDAqBJ,IAAD,OACP,OACE,yBAAKuB,GAAG,gBACN,yBAAKD,UAAU,YACZ8B,OAAOC,KAAKjB,GAAYkB,KAAI,SAACrC,GAC5B,OACE,kBAAC,EAAD,CACEA,IAAKA,EACLrB,KAAMqB,EACNlB,WAAY,EAAKoD,MAAMpD,WACvBF,MAAOuC,EAAWnB,GAClBnB,YAAa,EAAKiD,QAClB/C,OAAQ,EAAKmD,MAAMnD,aAK3B,kBAAC,EAAD,CACE6B,QAAS0B,KAAKJ,MAAMtB,QACpBhC,MAAO0D,KAAKJ,MAAMnD,OAClBD,WAAYwD,KAAKJ,MAAMpD,WACvB+B,iBAAkByB,KAAKzB,iBACvBC,mBAAoBwB,KAAKxB,0B,GA5CTyB,IAAMC,WCQjBC,MARf,WACE,OACE,yBAAKpC,UAAU,aACb,kBAAC,EAAD,QCKcqC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEF/C,SAASgD,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB3D,MAAK,SAAA4D,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.05ec161a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/clap.39f9581a.wav\";","module.exports = __webpack_public_path__ + \"static/media/kick_zapper.dede7ee9.wav\";","module.exports = __webpack_public_path__ + \"static/media/kick.550be808.wav\";","module.exports = __webpack_public_path__ + \"static/media/openhat_acoustic.a62db465.wav\";","module.exports = __webpack_public_path__ + \"static/media/ride_acoustic.b0d70ec5.wav\";","module.exports = __webpack_public_path__ + \"static/media/snare_analog.5e055a5d.wav\";","module.exports = __webpack_public_path__ + \"static/media/snare_modular.983e56d9.wav\";","module.exports = __webpack_public_path__ + \"static/media/snare.ffebfc9e.wav\";","module.exports = __webpack_public_path__ + \"static/media/tom_fm.79c2c9b6.wav\";","import React, { useEffect, useRef, useCallback, useState } from \"react\";\r\nimport clap from \"../asset/audio/clap.wav\";\r\nimport kick_zapper from \"../asset/audio/kick_zapper.wav\";\r\nimport kick from \"../asset/audio/kick.wav\";\r\nimport openhat_acoustic from \"../asset/audio/openhat_acoustic.wav\";\r\nimport ride_acoustic from \"../asset/audio/ride_acoustic.wav\";\r\nimport snare_analog from \"../asset/audio/snare_analog.wav\";\r\nimport snare_modular from \"../asset/audio/snare_modular.wav\";\r\nimport snare from \"../asset/audio/snare.wav\";\r\nimport tom_fm from \"../asset/audio/tom_fm.wav\";\r\n\r\nconst audioObj = {\r\n  clap: clap,\r\n  kick_zapper: kick_zapper,\r\n  kick: kick,\r\n  openhat_acoustic: openhat_acoustic,\r\n  ride_acoustic: ride_acoustic,\r\n  snare_analog: snare_analog,\r\n  snare_modular: snare_modular,\r\n  snare: snare,\r\n  tom_fm: tom_fm,\r\n};\r\n\r\nconst DrumPad = ({ name, value, handleClick, drumStatus, volume }) => {\r\n  let clip_ref = useRef(null);\r\n  const [pressed, setPressed] = useState(false);\r\n  const playAudio = useCallback(() => {\r\n    if (drumStatus) {\r\n      clip_ref.current.volume = volume / 100;\r\n      clip_ref.current.currentTime = 0;\r\n      clip_ref.current.play().then(() => {\r\n        setPressed(true);\r\n      });\r\n      handleClick(value.replace(/_/g, \" \").toUpperCase());\r\n      setTimeout(() => {\r\n        setPressed(false);\r\n      }, 100);\r\n    }\r\n  }, [drumStatus, handleClick, value, volume]);\r\n  const handleLocalClick = () => {\r\n    if (drumStatus) {\r\n      playAudio();\r\n    }\r\n  };\r\n  const handleKeyUp = useCallback(\r\n    (e) => {\r\n      if (drumStatus && name === e.key.toUpperCase()) {\r\n        playAudio();\r\n      }\r\n    },\r\n    [drumStatus, name, playAudio]\r\n  );\r\n  useEffect(() => {\r\n    document.addEventListener(\"keyup\", handleKeyUp);\r\n    return () => {\r\n      document.removeEventListener(\"keyup\", handleKeyUp);\r\n    };\r\n  }, [handleKeyUp]);\r\n  return (\r\n    <div\r\n      className={`drum-pad ${!drumStatus ? \"event-none\" : \"\"} ${\r\n        pressed ? \"pressed\" : \"\"\r\n      }`}\r\n      id={value}\r\n      onClick={handleLocalClick}\r\n    >\r\n      <strong className=\"pad-name\">{name}</strong>\r\n      <audio\r\n        className=\"clip\"\r\n        id={name}\r\n        src={audioObj[value]}\r\n        ref={clip_ref}\r\n        type=\"audio/wav\"\r\n      ></audio>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DrumPad;\r\n","import React from \"react\";\r\n\r\nconst DrumControls = ({\r\n  display,\r\n  drumStatus,\r\n  handleDrumStatus,\r\n  volume,\r\n  handleVolumeChange,\r\n}) => {\r\n  return (\r\n    <div className=\"control-container\">\r\n      <div\r\n        className={`control ${drumStatus ? \"on\" : \"\"}`}\r\n        onClick={handleDrumStatus}\r\n      >\r\n        {drumStatus ? \"ON\" : \"OFF\"}\r\n      </div>\r\n      <p id=\"display\">{display}</p>\r\n      <div className=\"volume-slider\">\r\n        <input\r\n          type=\"range\"\r\n          name=\"volume-slider\"\r\n          id=\"volume-slider\"\r\n          min=\"0\"\r\n          max=\"100\"\r\n          disabled={!drumStatus}\r\n          value={volume}\r\n          onChange={handleVolumeChange}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DrumControls;\r\n","export const drumPadObj = {\r\n  Q: \"clap\",\r\n  W: \"kick_zapper\",\r\n  E: \"kick\",\r\n  A: \"openhat_acoustic\",\r\n  S: \"ride_acoustic\",\r\n  D: \"snare_analog\",\r\n  Z: \"snare_modular\",\r\n  X: \"snare\",\r\n  C: \"tom_fm\",\r\n};\r\n","import React from \"react\";\r\nimport DrumPad from \"./drum-pad\";\r\nimport DrumControls from \"./drum-controls\";\r\nimport { drumPadObj } from \"../static/drumpadObject\";\r\nclass DrumMachine extends React.Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      display: \"   \",\r\n      drumStatus: true,\r\n      volume: 50,\r\n    };\r\n  }\r\n  setNode = (value) => {\r\n    this.setState({ display: value });\r\n  };\r\n  handleDrumStatus = () =>\r\n    this.setState((prevState) => {\r\n      return { drumStatus: !prevState.drumStatus, display: \"\" };\r\n    });\r\n  handleVolumeChange = (e) => {\r\n    this.setState({\r\n      volume: e.target.value,\r\n      display: `Volume: ${e.target.value}`,\r\n    });\r\n  };\r\n  render() {\r\n    return (\r\n      <div id=\"drum-machine\">\r\n        <div className=\"pad-bank\">\r\n          {Object.keys(drumPadObj).map((key) => {\r\n            return (\r\n              <DrumPad\r\n                key={key}\r\n                name={key}\r\n                drumStatus={this.state.drumStatus}\r\n                value={drumPadObj[key]}\r\n                handleClick={this.setNode}\r\n                volume={this.state.volume}\r\n              />\r\n            );\r\n          })}\r\n        </div>\r\n        <DrumControls\r\n          display={this.state.display}\r\n          value={this.state.volume}\r\n          drumStatus={this.state.drumStatus}\r\n          handleDrumStatus={this.handleDrumStatus}\r\n          handleVolumeChange={this.handleVolumeChange}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default DrumMachine;\r\n","import React from \"react\";\nimport \"./App.scss\";\nimport DrumMachine from \"./components/drum-machine\";\n\nfunction App() {\n  return (\n    <div className=\"container\">\n      <DrumMachine />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}